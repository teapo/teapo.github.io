{"ts":1374102827844,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1374103052369,"patch":[[{"diffs":[[1,"module teapo.tscNode {\n\n    export function install(fs?: any, logCallback?: (text: string, kind: string) => void) {\n        return installCore(fs, logCallback);\n    }\n\n    var noneJustDelete = {};\n\n    function installPolyfills(global, polyfills) {\n        var saved: any = {};\n        for (var k in polyfills) if (polyfills.hasOwnProperty(k)) {\n            if (k in global)\n                saved[k] = global[k];\n            else\n                saved[k] = noneJustDelete;\n            global[k] = polyfills[k];\n        }\n        return saved;\n    }\n\n    function readFileSync(filename: string, fs: any) {\n        if (!(filename in fs))\n            return null;\n        else\n            return fs[filename];\n    }\n\n    function writeFileSync(filename: string, content: string, fs: any) {\n        return fs[filename] = content;\n    }\n\n    function writeStdout(str: string, logCallback: (text: string, kind: string) => void) {\n        if (logCallback)\n            logCallback(str, 'stdout');\n    }\n    function writeStderr(str: string, logCallback: (text: string, kind: string) => void) {\n        if (logCallback)\n            logCallback(str, 'stderr');\n    }\n\n    var installed: boolean;\n    function installCore(fs: any, logCallback: (text: string, kind: string) => void) {\n        var global: any = (function() { return this; })() || window;\n\n        var requireModules: any = {\n            fs: {\n                readFileSync: (filename) => readFileSync(filename, fs),\n                writeFileSync: (filename, content) => writeFileSync(filename, content, fs)\n            },\n            path: { },\n            os: {\n                EOL: '\\n'\n            }\n        };\n\n        var saved = installPolyfills(global, {\n            module: {\n                exports: {}\n            },\n            process: {\n                cwd: () => '/',\n                argv: [ 'node', 'tsc.js' ],\n                stdout: {\n                    write: (str) => writeStdout(str, logCallback),\n                    on: (eventName: string, callback) => {\n                        if (eventName==='drain') {\n                            callback();\n                        }\n                    }\n                },\n                stderr: {\n                    write: (str) => writeStderr(str, logCallback),\n                    on: (eventName: string, callback) => {\n                        if (eventName==='drain') {\n                            callback();\n                        }\n                    }\n                },\n                exit: (exitCode) => {\n                    if (installed) // do not throw at the first dummy run: nobody is catching\n                        return;\n                    throw new Error('process.exit('+exitCode+')');\n                }\n            },\n            require: (moduleName: string) => requireModules[moduleName]\n        });\n\n        installed = true;\n        return () => uninstall(saved, global);\n    }\n    \n    function uninstall(saved, global) {\n        installed = false;\n        for (var k in saved) if (saved.hasOwnProperty(k)) {\n            var savedValue = saved[k];\n            if (savedValue === noneJustDelete)\n                delete global[k];\n            else\n                global[k] = saved;\n        }\n    }\n}"]],"start1":0,"start2":0,"length1":0,"length2":3248}]],"length":3248,"saved":false}
