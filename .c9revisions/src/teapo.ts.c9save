{"ts":1374102770957,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1374102996504,"patch":[[{"diffs":[[1,"/// <reference path='typings/codemirror.d.ts' />\n/// <reference path='typings/codemirror.show-hint.d.ts' />\n/// <reference path='layout.ts' />\n/// <reference path='core.ts' />\n/// <reference path='fs.ts' />\n/// <reference path='tscNode.ts' />\n\nmodule teapo {\n    export class Editor {\n        private _fs = new teapo.core.FileSystem();\n        private _editor: CodeMirror.Editor;\n\n        private _selectedFileName: string = null;\n\n        private _emptyDoc = new CodeMirror.Doc('');\n\n        private _completionDelay = null;\n\n        private _newFilename: HTMLInputElement = null;\n        private _newFileButton: HTMLButtonElement = null;\n        private _isEnteringNewFilename: boolean = false;\n\n        constructor(\n            private _toolbar: HTMLElement,\n            private _navigator: HTMLElement,\n            private _content: HTMLElement) {\n            this._editor = CodeMirror(this._content, {\n                mode: \"text/typescript\",//here\n                matchBrackets: true,\n                continueComments: \"Enter\",\n                autoCloseBrackets: true,\n                lineNumbers: true,\n                autofocus: true,\n                styleActiveLine: true,\n                matchBrackets: true,\n                showTrailingSpace: true,\n                // indentWithTabs: true,\n                continueComments: \"Enter\",\n                extraKeys: {\n                    'Ctrl-Space': () => this._triggerCompletion('Ctrl-Space')\n                }\n            });\n            this._editor.on('change', (instance, changeList: CodeMirror.EditorChangeLinkedList) => {\n                if (!changeList.text\n                    || changeList.text.length==0\n                    || changeList.next)\n                    return;\n\n                if (changeList.text[0]==='.'\n                    || changeList.text[0]==='. '\n                    || changeList.text[0]==='('\n                    || changeList.text[0]==='.'\n                    || changeList.text[0]==='=')\n                    this._triggerCompletion(changeList.text[0]);\n            });\n\n            var savedState = this._retrieveSavedState();\n            if (savedState) {\n                for (var f in savedState) if (savedState.hasOwnProperty(f)) {\n                    if (f.charAt(0)==='/') {\n                        this._fs.createScript(f, savedState[f]);\n                    }\n\n                    if (f==='selected') {\n                        this._selectedFileName = savedState[f];\n                    }\n                }\n            }\n\n            this._updateToolbar();\n            this._updateNavigator();\n            this._processNavigatorSelection();\n\n            var autosaveTimeout = null;\n            this._fs.onchange = () => {\n                if (autosaveTimeout)\n                    clearTimeout(autosaveTimeout);\n                autosaveTimeout = setTimeout(() => {\n                    autosaveTimeout = null;\n                    this._saveState();\n                }, 1000);\n            };\n        }\n\n        private _updateToolbar() {\n            if (!this._newFilename) {\n                this._newFilename = document.createElement('input');\n                this._newFilename.style.display = 'none';\n                this._newFilename.onkeydown = (e) => this._onNewFilenameKey(e || window.event);\n                this._newFilename.onblur = () => this._onNewFilenameBlur();\n                this._toolbar.appendChild(this._newFilename);\n            }\n            if (!this._newFileButton) {\n                this._newFileButton = document.createElement('button');\n                var newFileText = '/new file...';\n                if ('textContent' in this._newFileButton)\n                    this._newFileButton.textContent = newFileText;\n                else if ('innerText' in this._newFileButton)\n                    this._newFileButton.innerText = newFileText;\n                this._newFileButton.onclick = () => this._onNewFileClick();\n                this._toolbar.appendChild(this._newFileButton);\n            }\n        }\n\n        private _onNewFileClick() {\n            this._newFileButton.style.display = 'none';\n            this._newFilename.style.display = 'block';\n            this._newFilename.value = '/';\n            this._newFilename.focus();\n            this._newFilename.selectionStart = this._newFilename.value.length;\n        }\n\n        private _onNewFilenameKey(e: KeyboardEvent) {\n            if (e.keyCode===13) {\n                try {\n                    this._addFile(this._newFilename.value);\n                }\n                catch (error) {\n                    alert(error.message);\n                    return;\n                }\n\n                this._newFileButton.style.display = 'block';\n                this._newFilename.style.display = 'none';\n                if ('cancelBubble' in e)\n                    e.cancelBubble = true;\n            }\n            else if (e.keyCode===27) {\n                this._cancelNewFilename();\n            }\n        }\n\n        private _onNewFilenameBlur() {\n            this._cancelNewFilename();\n        }\n\n        private _cancelNewFilename() {\n            if (this._newFilename.style.display!=='block'\n                || this._newFileButton.style.display==='none')\n                return;\n            this._newFileButton.style.display = 'block';\n            this._newFilename.style.display = 'none';\n        }\n\n        private _addFile(filename: string) {\n            this._fs.createScript(filename, '');\n            this._selectedFileName = filename;\n            this._updateNavigator();\n            this._processNavigatorSelection();\n            this._editor.focus();\n        }\n\n        private _setEditingNewFilename(isEditing: boolean) {\n            if (this._isEnteringNewFilename) {\n                this._newFilename.style.display = 'block';\n            }\n            else {\n                this._newFilename.style.display = 'none';\n            }\n        }\n\n        private _updateNavigator() {\n            this._navigator.innerHTML = '';\n            this._navigator.textContent = '';\n            var orderedScripts = this._fs.scriptNames();\n            orderedScripts.sort();\n            for (var i = 0; i < orderedScripts.length; i++) {\n                var filename = orderedScripts[i];\n\n                var scriptElement = this._createNavigatorScriptElement(filename);\n\n                this._navigator.appendChild(scriptElement);\n            }\n        }\n\n        private _createNavigatorScriptElement(filename: string) {\n            var scriptElement = document.createElement('pre');\n            scriptElement.className = 'teapo-navigator-script';\n            if (this._selectedFileName === filename)\n                scriptElement.className += ' teapo-navigator-script-selected';\n\n            if ('textContent' in scriptElement)\n                scriptElement.textContent = filename;\n            else if ('innerText' in scriptElement)\n                scriptElement.innerText = filename;\n\n            scriptElement.onclick = () => this._navigatorScriptClicked(filename);\n\n            return scriptElement;\n        }\n\n        private _navigatorScriptClicked(filename: string) {\n            this._selectedFileName = filename;\n            this._updateNavigator();\n            this._processNavigatorSelection();\n            this._editor.focus();\n        }\n\n        private _processNavigatorSelection() {\n            if (this._selectedFileName) {\n                this._editor.setOption('readOnly', false);\n                var script = this._fs.getScript(this._selectedFileName);\n                this._editor.swapDoc(script);\n                this._editor.setOption('mode', 'text/typescript');\n            }\n            else {\n                this._editor.swapDoc(this._emptyDoc);\n                this._editor.setOption('readOnly', true);\n            }\n        }\n\n        private _retrieveStateFromHtml() {\n            var result: any = {};\n            for (var i = 0; i < document.scripts.length; i++) {\n                var script = <HTMLScriptElement>document.scripts[i];\n\n                var filename = script.title || script.getAttribute('title');\n                if (!filename)\n                    continue;\n\n                var content: string;\n                if ('text' in script)\n                    content = script.text;\n                else if ('textContent' in script)\n                    content = script.textContent;\n                else if ('innerText' in script)\n                    content = script.innerText;\n\n                if (content===null)\n                    continue;\n\n                result[filename] = content;\n            }\n            return result;\n        }\n\n        private _getLocalStorageKey() {\n            var stateKey = 'teapoState';\n            if (location.hash)\n                stateKey += '@'+location.href.substr(0, location.href.length - location.hash.length);\n            else\n                stateKey = '@'+location.href;\n            return stateKey;\n        }\n\n        private _retrieveStateFromLocalStorage() {\n\n            var result: any = {};\n            if ('JSON' in window\n                && 'localStorage' in window) {\n                try {\n                    result = JSON.parse(localStorage[this._getLocalStorageKey()]);\n                }\n                catch (error) { }\n            }\n            return result;            \n        }\n        \n        private _retrieveSavedState() {\n            var htmlState = this._retrieveStateFromHtml();\n            var localStorageState = this._retrieveStateFromLocalStorage();\n\n            if (htmlState===null)\n                return localStorageState;\n            if (localStorageState===null)\n                return htmlState;\n\n            var htmlStateSaved = htmlState.saved;\n            if (htmlStateSaved) {\n                try {\n                    htmlStateSaved = Date.parse(htmlStateSaved);\n                }\n                catch (error) { }\n            }\n\n            var localStorageStateSaved = localStorageState.saved;\n            if (localStorageStateSaved) {\n                try {\n                    localStorageStateSaved = Date.parse(localStorageStateSaved);\n                }\n                catch (error) { }\n            }\n            \n            if (htmlStateSaved < localStorageStateSaved)\n                return localStorageState;\n            else\n                return htmlState;\n        }\n\n        private _saveState() {\n            this._saveStateToLocalStorage();\n            this._saveStateToHtml();\n        }\n\n        private _saveStateToHtml() {\n\n            // remove all scripts that are part of the state\n            var removeScripts = [];\n            for (var i = 0; i < document.scripts.length; i++) {\n                var s = <HTMLScriptElement>document.scripts[i];\n                if (s.title)\n                    removeScripts.push(s);\n            }\n            for (var i = 0; i < removeScripts.length; i++) {\n                if ('head' in document)\n                    document.head.removeChild(removeScripts[i]);\n                else\n                    document.getElementsByTagName('head')[0].removeChild(removeScripts[i]);\n            }\n\n            var scriptFilenames = this._fs.scriptNames();\n            for (var i = 0; i < scriptFilenames.length; i++) {\n                var fn = scriptFilenames[i];\n                var doc = this._fs.getScript(fn);\n                \n                this._addScript(fn, doc.getValue());\n            }\n            \n            this._addScript(\n                'saved',\n                new Date().toUTCString());\n            this._addScript(\n                'selected',\n                this._selectedFileName);\n        }\n\n        private _addScript(title: string, content: string) {\n            var persistenceScriptType = 'save';\n            var scriptElement = document.createElement('script');\n\n            if ('title' in scriptElement)\n                scriptElement.title = title;\n            else if (scriptElement.setAttribute)\n                scriptElement.setAttribute('title', title);\n\n            if ('type' in scriptElement)\n                scriptElement.type = persistenceScriptType;\n            else if (scriptElement.setAttribute)\n                scriptElement.setAttribute('type', persistenceScriptType);\n\n            if ('text' in scriptElement)\n                scriptElement.text = title;\n            else if ('textContent' in scriptElement)\n                scriptElement.textContent = title;\n            else if ('innerText' in scriptElement)\n                scriptElement.innerText = title;\n\n            if (document.head)\n                document.head.appendChild(scriptElement);\n            else\n                document.getElementsByTagName('head')[0].appendChild(scriptElement);\n\n            return scriptElement;\n        }\n\n        private _saveStateToLocalStorage() {\n            if (!window.localStorage || !window['JSON'])\n                return;\n\n            var state: any = {\n                saved: new Date().toUTCString(),\n                selected: this._selectedFileName\n            };\n\n            var scripts = this._fs.scriptNames();\n            for (var i = 0; i < scripts.length; i++) {\n                var s = scripts[i];\n                var doc = this._fs.getScript(s);\n                state[s] = doc.getValue();\n            }\n\n            localStorage[this._getLocalStorageKey()] = JSON.stringify(state);\n        }\n\n        private _debugDump;\n        private _triggerCompletion(key: string) {\n            if (!this._debugDump) {\n                this._debugDump = document.createElement('span');\n                this._toolbar.appendChild(this._debugDump);\n            }\n            this._debugDump.textContent = '['+key+'] '+this._debugDump.textContent;\n            \n            if (this._completionDelay)\n                clearTimeout(this._completionDelay);\n\n            this._completionDelay = setTimeout(() => {\n                this._completionDelay = null;\n                this._performCompletion(key);\n            }, 100);\n\n            return CodeMirror.Pass;\n        }\n\n        private _performCompletion(key: string) {\n            // keeping the list\n            var completions = this._getFullCompletionObject();\n            if (!completions)\n                return;\n\n            CodeMirror.showHint(\n                this._editor,\n                () => {\n                    var doc = this._editor.getDoc();\n                    var cursorPos = doc.getCursor();\n\n                    var result = [];\n                    var wp = this._getWordAndPrefix(doc, cursorPos);\n                    for (var i = 0; i < completions.length; i++) {\n                        var cm = completions[i];\n                        var tsco = cm.tsco;\n                        // filter out those not matching the start of the word\n                        if (tsco.name.length<wp.prefix.length\n                            || tsco.name.substring(0, wp.prefix.length).toLowerCase()!==wp.prefix.toLowerCase())\n                            continue;\n                        result.push(cm);\n                        \n                        if (result.length>30) {\n                            result.push({\n                                displayText: '...continue typing for more...',\n                                text: ''\n                            });\n                            break;\n                        }\n                    }\n\n                    var from = {\n                        ch: cursorPos.ch - wp.prefix.length,\n                        line: cursorPos.line\n                    };\n\n                    var to = {\n                        ch: from.ch + wp.word.length,\n                        line: cursorPos.line\n                    };\n\n                    return {\n                        list: result,\n                        from: from,\n                        to: to\n                    };\n                });\n        }\n\n        private _getFullCompletionObject() {\n            var doc = this._editor.getDoc();\n            var cursorPos = doc.getCursor();\n\n            var cursorOffset = doc.indexFromPos(cursorPos);\n\n            var tsCompletions = this._getTypeScriptCompletions(this._selectedFileName, cursorOffset);\n            var cmCompletions = this._getCodeMirrorCompletions(doc, this._selectedFileName, cursorPos, cursorOffset, tsCompletions);\n            \n            return cmCompletions;\n        }\n    \n        private _getTypeScriptCompletions(filename: string, cursorOffset: number) {\n            var completions = this._fs.typescript.getCompletionsAtPosition(filename, cursorOffset, true);\n            return completions;\n        }\n        \n        private _getCodeMirrorCompletions(\n            doc: CodeMirror.Doc, filename: string,\n            cursorPos: CodeMirror.Pos, cursorOffset: number,\n            tsCompletions: Services.CompletionInfo) {\n\n            if (!tsCompletions || !tsCompletions.entries.length)\n                return null;\n                \n            var wp = this._getWordAndPrefix(doc, cursorPos);\n                \n            var cmCompletions = [];\n            var added: any = {};\n            for (var i = 0; i < tsCompletions.entries.length; i++) {\n                var tsco = tsCompletions.entries[i];\n    \n                if (added[tsco.name])\n                    continue;\n\n                if (tsco.kind==='keyword'\n                    || tsco.name==='undefined' || tsco.name==='null')\n                    continue;\n\n                //console.log(tsco);\n                added[tsco.name] = true;\n\n                cmCompletions.push({\n                    displayText: tsco.name, // + (tsco.docComment ? ' /** '+tsco.docComment+'*/':''),\n                    text: tsco.name,\n                    tsco: tsco,\n                    index: i,\n                    tscoDetails: null,\n                    render: (elt: HTMLElement, data: any, completion: { \n                        index: number;\n                        tscoDetails: Services.CompletionEntryDetails;\n                        tsco: Services.CompletionEntry }) => {\n\n                        var tsco = completion.tsco;\n                        var tscoDetails = completion.tscoDetails || this._fs.typescript.getCompletionEntryDetails(\n                            filename, cursorOffset,\n                            tsco.name);\n\n                        if ('textContent' in elt)\n                            elt.textContent = tsco.name;\n                        else\n                            elt.innerText = tsco.name;\n\n                        if (tscoDetails.docComment) {\n                            var commentSpan = document.createElement('span');\n                            if ('textContent'  in commentSpan)\n                                commentSpan.textContent = ' //'+tscoDetails.docComment;\n                            else\n                                commentSpan.innerText = ' //'+tscoDetails.docComment;\n                            commentSpan.style.opacity = '0.5';\n                            elt.appendChild(commentSpan);\n                        }                        \n                    }\n                })\n            }\n\n            return cmCompletions;\n        }\n        \n        private _getWordAndPrefix(doc: CodeMirror.Doc, cursorPos: CodeMirror.Pos) {\n            var lineText = doc.getLine(cursorPos.line);\n            \n            var prefix = '';\n            for (var i = cursorPos.ch-1; i>=0; i--) {\n                var c = lineText[i];\n                if (this._isWordChar(c)) {\n                    prefix = c + prefix;\n                }\n                else {\n                    break;\n                }        \n            }\n            \n            var word = prefix;\n            for (var i = cursorPos.ch; i<lineText.length; i++) {\n                var c = lineText[i];\n                if (this._isWordChar(c)) {\n                    word += c;\n                }\n                else {\n                    break;\n                }        \n            }\n            \n            return {word: word, prefix: prefix};\n        }\n\n        private _isWordChar(c: string): boolean {\n            return (\n                (c==='_')\n                || (c==='$')\n                || (c>='0' && c<='9')\n                || (c>='a' && c<='z')\n                || (c>='A' && c<='Z'));\n        }\n\n    }\n}"]],"start1":0,"start2":0,"length1":0,"length2":20314}]],"length":20314,"saved":false}
